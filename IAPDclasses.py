#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Nov  2 09:50:11 2017 by generateDS.py version 2.28.2.
# Python 3.5.2 (default, Nov 17 2016, 17:05:23)  [GCC 5.4.0 20160609]
#
# Command line options:
#   ('-a', 'xsd:')
#   ('-o', 'IAPDclasses.py')
#   ('-s', 'IAPDsubclasses.py')
#
# Command line arguments:
#   IAPDIndividualBulkFeed.xsd
#
# Command line:
#   generateDS.py -a "xsd:" -o "IAPDclasses.py" -s "IAPDsubclasses.py" IAPDIndividualBulkFeed.xsd
#
# Current working directory (os.getcwd()):
#   generateDS-2.28.2
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class IAPDIndividualReportType(GeneratedsSuper):
    """This node contains the report generated date information."""
    subclass = None
    superclass = None
    def __init__(self, GenOn=None, Indvls=None):
        self.original_tagname_ = None
        if isinstance(GenOn, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(GenOn, '%Y-%m-%d').date()
        else:
            initvalue_ = GenOn
        self.GenOn = initvalue_
        self.Indvls = Indvls
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IAPDIndividualReportType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IAPDIndividualReportType.subclass:
            return IAPDIndividualReportType.subclass(*args_, **kwargs_)
        else:
            return IAPDIndividualReportType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Indvls(self): return self.Indvls
    def set_Indvls(self, Indvls): self.Indvls = Indvls
    def get_GenOn(self): return self.GenOn
    def set_GenOn(self, GenOn): self.GenOn = GenOn
    def hasContent_(self):
        if (
            self.Indvls is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='IAPDIndividualReportType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IAPDIndividualReportType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IAPDIndividualReportType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='IAPDIndividualReportType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='IAPDIndividualReportType'):
        if self.GenOn is not None and 'GenOn' not in already_processed:
            already_processed.add('GenOn')
            outfile.write(' GenOn="%s"' % self.gds_format_date(self.GenOn, input_name='GenOn'))
    def exportChildren(self, outfile, level, namespace_='', name_='IAPDIndividualReportType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Indvls is not None:
            self.Indvls.export(outfile, level, namespace_, name_='Indvls', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('GenOn', node)
        if value is not None and 'GenOn' not in already_processed:
            already_processed.add('GenOn')
            try:
                self.GenOn = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (GenOn): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Indvls':
            obj_ = IndvlsType.factory()
            obj_.build(child_)
            self.Indvls = obj_
            obj_.original_tagname_ = 'Indvls'
# end class IAPDIndividualReportType


class IndvlsType(GeneratedsSuper):
    """The Individuals node contains a collection of individuals for the
    firm."""
    subclass = None
    superclass = None
    def __init__(self, Indvl=None):
        self.original_tagname_ = None
        if Indvl is None:
            self.Indvl = []
        else:
            self.Indvl = Indvl
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IndvlsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IndvlsType.subclass:
            return IndvlsType.subclass(*args_, **kwargs_)
        else:
            return IndvlsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Indvl(self): return self.Indvl
    def set_Indvl(self, Indvl): self.Indvl = Indvl
    def add_Indvl(self, value): self.Indvl.append(value)
    def insert_Indvl_at(self, index, value): self.Indvl.insert(index, value)
    def replace_Indvl_at(self, index, value): self.Indvl[index] = value
    def hasContent_(self):
        if (
            self.Indvl
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='IndvlsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IndvlsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IndvlsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='IndvlsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='IndvlsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='IndvlsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Indvl_ in self.Indvl:
            Indvl_.export(outfile, level, namespace_, name_='Indvl', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Indvl':
            obj_ = IndvlType.factory()
            obj_.build(child_)
            self.Indvl.append(obj_)
            obj_.original_tagname_ = 'Indvl'
# end class IndvlsType


class IndvlType(GeneratedsSuper):
    """The Individual node contains Administrative and/or Disclosure
    information for one of many individuals requested by this
    report."""
    subclass = None
    superclass = None
    def __init__(self, Info=None, OthrNms=None, CrntEmps=None, Exms=None, Dsgntns=None, PrevRgstns=None, EmpHss=None, OthrBuss=None, DRPs=None):
        self.original_tagname_ = None
        self.Info = Info
        self.OthrNms = OthrNms
        self.CrntEmps = CrntEmps
        self.Exms = Exms
        self.Dsgntns = Dsgntns
        self.PrevRgstns = PrevRgstns
        self.EmpHss = EmpHss
        self.OthrBuss = OthrBuss
        self.DRPs = DRPs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IndvlType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IndvlType.subclass:
            return IndvlType.subclass(*args_, **kwargs_)
        else:
            return IndvlType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Info(self): return self.Info
    def set_Info(self, Info): self.Info = Info
    def get_OthrNms(self): return self.OthrNms
    def set_OthrNms(self, OthrNms): self.OthrNms = OthrNms
    def get_CrntEmps(self): return self.CrntEmps
    def set_CrntEmps(self, CrntEmps): self.CrntEmps = CrntEmps
    def get_Exms(self): return self.Exms
    def set_Exms(self, Exms): self.Exms = Exms
    def get_Dsgntns(self): return self.Dsgntns
    def set_Dsgntns(self, Dsgntns): self.Dsgntns = Dsgntns
    def get_PrevRgstns(self): return self.PrevRgstns
    def set_PrevRgstns(self, PrevRgstns): self.PrevRgstns = PrevRgstns
    def get_EmpHss(self): return self.EmpHss
    def set_EmpHss(self, EmpHss): self.EmpHss = EmpHss
    def get_OthrBuss(self): return self.OthrBuss
    def set_OthrBuss(self, OthrBuss): self.OthrBuss = OthrBuss
    def get_DRPs(self): return self.DRPs
    def set_DRPs(self, DRPs): self.DRPs = DRPs
    def hasContent_(self):
        if (
            self.Info is not None or
            self.OthrNms is not None or
            self.CrntEmps is not None or
            self.Exms is not None or
            self.Dsgntns is not None or
            self.PrevRgstns is not None or
            self.EmpHss is not None or
            self.OthrBuss is not None or
            self.DRPs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='IndvlType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IndvlType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IndvlType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='IndvlType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='IndvlType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='IndvlType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Info is not None:
            self.Info.export(outfile, level, namespace_, name_='Info', pretty_print=pretty_print)
        if self.OthrNms is not None:
            self.OthrNms.export(outfile, level, namespace_, name_='OthrNms', pretty_print=pretty_print)
        if self.CrntEmps is not None:
            self.CrntEmps.export(outfile, level, namespace_, name_='CrntEmps', pretty_print=pretty_print)
        if self.Exms is not None:
            self.Exms.export(outfile, level, namespace_, name_='Exms', pretty_print=pretty_print)
        if self.Dsgntns is not None:
            self.Dsgntns.export(outfile, level, namespace_, name_='Dsgntns', pretty_print=pretty_print)
        if self.PrevRgstns is not None:
            self.PrevRgstns.export(outfile, level, namespace_, name_='PrevRgstns', pretty_print=pretty_print)
        if self.EmpHss is not None:
            self.EmpHss.export(outfile, level, namespace_, name_='EmpHss', pretty_print=pretty_print)
        if self.OthrBuss is not None:
            self.OthrBuss.export(outfile, level, namespace_, name_='OthrBuss', pretty_print=pretty_print)
        if self.DRPs is not None:
            self.DRPs.export(outfile, level, namespace_, name_='DRPs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Info':
            obj_ = InfoType.factory()
            obj_.build(child_)
            self.Info = obj_
            obj_.original_tagname_ = 'Info'
        elif nodeName_ == 'OthrNms':
            obj_ = OthrNmsType.factory()
            obj_.build(child_)
            self.OthrNms = obj_
            obj_.original_tagname_ = 'OthrNms'
        elif nodeName_ == 'CrntEmps':
            obj_ = CrntEmpsType.factory()
            obj_.build(child_)
            self.CrntEmps = obj_
            obj_.original_tagname_ = 'CrntEmps'
        elif nodeName_ == 'Exms':
            obj_ = ExmsType.factory()
            obj_.build(child_)
            self.Exms = obj_
            obj_.original_tagname_ = 'Exms'
        elif nodeName_ == 'Dsgntns':
            obj_ = DsgntnsType.factory()
            obj_.build(child_)
            self.Dsgntns = obj_
            obj_.original_tagname_ = 'Dsgntns'
        elif nodeName_ == 'PrevRgstns':
            obj_ = PrevRgstnsType.factory()
            obj_.build(child_)
            self.PrevRgstns = obj_
            obj_.original_tagname_ = 'PrevRgstns'
        elif nodeName_ == 'EmpHss':
            obj_ = EmpHistsType.factory()
            obj_.build(child_)
            self.EmpHss = obj_
            obj_.original_tagname_ = 'EmpHss'
        elif nodeName_ == 'OthrBuss':
            obj_ = OthrBussType.factory()
            obj_.build(child_)
            self.OthrBuss = obj_
            obj_.original_tagname_ = 'OthrBuss'
        elif nodeName_ == 'DRPs':
            obj_ = DRPsType.factory()
            obj_.build(child_)
            self.DRPs = obj_
            obj_.original_tagname_ = 'DRPs'
# end class IndvlType


class InfoType(GeneratedsSuper):
    """The Info node contains basic information describing the individual.
    Individual's Last Name Individual's First Name Individual's
    Middle Name Individual's Suffix Name Individual's CRD #
    Identifies if individual has Active AG Registration. Link URL to
    the individual’s composite in IAPD."""
    subclass = None
    superclass = None
    def __init__(self, lastNm=None, firstNm=None, midNm=None, sufNm=None, indvlPK=None, actvAGReg=None, link=None):
        self.original_tagname_ = None
        self.lastNm = _cast(None, lastNm)
        self.firstNm = _cast(None, firstNm)
        self.midNm = _cast(None, midNm)
        self.sufNm = _cast(None, sufNm)
        self.indvlPK = _cast(None, indvlPK)
        self.actvAGReg = _cast(None, actvAGReg)
        self.link = _cast(None, link)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InfoType.subclass:
            return InfoType.subclass(*args_, **kwargs_)
        else:
            return InfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_lastNm(self): return self.lastNm
    def set_lastNm(self, lastNm): self.lastNm = lastNm
    def get_firstNm(self): return self.firstNm
    def set_firstNm(self, firstNm): self.firstNm = firstNm
    def get_midNm(self): return self.midNm
    def set_midNm(self, midNm): self.midNm = midNm
    def get_sufNm(self): return self.sufNm
    def set_sufNm(self, sufNm): self.sufNm = sufNm
    def get_indvlPK(self): return self.indvlPK
    def set_indvlPK(self, indvlPK): self.indvlPK = indvlPK
    def get_actvAGReg(self): return self.actvAGReg
    def set_actvAGReg(self, actvAGReg): self.actvAGReg = actvAGReg
    def get_link(self): return self.link
    def set_link(self, link): self.link = link
    def validate_Str25(self, value):
        # Validate type Str25, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 25:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on Str25' % {"value" : value.encode("utf-8")} )
    def validate_Str20(self, value):
        # Validate type Str20, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on Str20' % {"value" : value.encode("utf-8")} )
    def validate_Str5(self, value):
        # Validate type Str5, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 5:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on Str5' % {"value" : value.encode("utf-8")} )
    def validate_Int10(self, value):
        # Validate type Int10, a restriction on xsd:integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 10:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on Int10' % {"value" : value} )
    def validate_answerYNType(self, value):
        # Validate type answerYNType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['Y', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on answerYNType' % {"value" : value.encode("utf-8")} )
    def validate_Str128(self, value):
        # Validate type Str128, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 512:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on Str128' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='InfoType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='InfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='InfoType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='InfoType'):
        if self.lastNm is not None and 'lastNm' not in already_processed:
            already_processed.add('lastNm')
            outfile.write(' lastNm=%s' % (quote_attrib(self.lastNm), ))
        if self.firstNm is not None and 'firstNm' not in already_processed:
            already_processed.add('firstNm')
            outfile.write(' firstNm=%s' % (quote_attrib(self.firstNm), ))
        if self.midNm is not None and 'midNm' not in already_processed:
            already_processed.add('midNm')
            outfile.write(' midNm=%s' % (quote_attrib(self.midNm), ))
        if self.sufNm is not None and 'sufNm' not in already_processed:
            already_processed.add('sufNm')
            outfile.write(' sufNm=%s' % (quote_attrib(self.sufNm), ))
        if self.indvlPK is not None and 'indvlPK' not in already_processed:
            already_processed.add('indvlPK')
            outfile.write(' indvlPK=%s' % (quote_attrib(self.indvlPK), ))
        if self.actvAGReg is not None and 'actvAGReg' not in already_processed:
            already_processed.add('actvAGReg')
            outfile.write(' actvAGReg=%s' % (quote_attrib(self.actvAGReg), ))
        if self.link is not None and 'link' not in already_processed:
            already_processed.add('link')
            outfile.write(' link=%s' % (quote_attrib(self.link), ))
    def exportChildren(self, outfile, level, namespace_='', name_='InfoType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('lastNm', node)
        if value is not None and 'lastNm' not in already_processed:
            already_processed.add('lastNm')
            self.lastNm = value
            self.validate_Str25(self.lastNm)    # validate type Str25
        value = find_attr_value_('firstNm', node)
        if value is not None and 'firstNm' not in already_processed:
            already_processed.add('firstNm')
            self.firstNm = value
            self.validate_Str25(self.firstNm)    # validate type Str25
        value = find_attr_value_('midNm', node)
        if value is not None and 'midNm' not in already_processed:
            already_processed.add('midNm')
            self.midNm = value
            self.validate_Str20(self.midNm)    # validate type Str20
        value = find_attr_value_('sufNm', node)
        if value is not None and 'sufNm' not in already_processed:
            already_processed.add('sufNm')
            self.sufNm = value
            self.validate_Str5(self.sufNm)    # validate type Str5
        value = find_attr_value_('indvlPK', node)
        if value is not None and 'indvlPK' not in already_processed:
            already_processed.add('indvlPK')
            try:
                self.indvlPK = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_Int10(self.indvlPK)    # validate type Int10
        value = find_attr_value_('actvAGReg', node)
        if value is not None and 'actvAGReg' not in already_processed:
            already_processed.add('actvAGReg')
            self.actvAGReg = value
            self.validate_answerYNType(self.actvAGReg)    # validate type answerYNType
        value = find_attr_value_('link', node)
        if value is not None and 'link' not in already_processed:
            already_processed.add('link')
            self.link = value
            self.validate_Str128(self.link)    # validate type Str128
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class InfoType


class OthrNmsType(GeneratedsSuper):
    """The OtherNames node contains a collection of names that an
    individual has used or is using, or by which they are known or
    have been known, other their legal name, since the age of 18.
    This would include, for example, nicknames, aliases, and names
    used before or after marriage."""
    subclass = None
    superclass = None
    def __init__(self, OthrNm=None):
        self.original_tagname_ = None
        if OthrNm is None:
            self.OthrNm = []
        else:
            self.OthrNm = OthrNm
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OthrNmsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OthrNmsType.subclass:
            return OthrNmsType.subclass(*args_, **kwargs_)
        else:
            return OthrNmsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OthrNm(self): return self.OthrNm
    def set_OthrNm(self, OthrNm): self.OthrNm = OthrNm
    def add_OthrNm(self, value): self.OthrNm.append(value)
    def insert_OthrNm_at(self, index, value): self.OthrNm.insert(index, value)
    def replace_OthrNm_at(self, index, value): self.OthrNm[index] = value
    def hasContent_(self):
        if (
            self.OthrNm
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OthrNmsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OthrNmsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OthrNmsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OthrNmsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OthrNmsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='OthrNmsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for OthrNm_ in self.OthrNm:
            OthrNm_.export(outfile, level, namespace_, name_='OthrNm', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OthrNm':
            obj_ = OthrNmType.factory()
            obj_.build(child_)
            self.OthrNm.append(obj_)
            obj_.original_tagname_ = 'OthrNm'
# end class OthrNmsType


class OthrNmType(GeneratedsSuper):
    """Individual's Last Name of Other name Individual's First Name of
    Other name Individual's Middle Name of Other name Individual's
    Suffix Name of Other name"""
    subclass = None
    superclass = None
    def __init__(self, lastNm=None, firstNm=None, midNm=None, sufNm=None):
        self.original_tagname_ = None
        self.lastNm = _cast(None, lastNm)
        self.firstNm = _cast(None, firstNm)
        self.midNm = _cast(None, midNm)
        self.sufNm = _cast(None, sufNm)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OthrNmType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OthrNmType.subclass:
            return OthrNmType.subclass(*args_, **kwargs_)
        else:
            return OthrNmType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_lastNm(self): return self.lastNm
    def set_lastNm(self, lastNm): self.lastNm = lastNm
    def get_firstNm(self): return self.firstNm
    def set_firstNm(self, firstNm): self.firstNm = firstNm
    def get_midNm(self): return self.midNm
    def set_midNm(self, midNm): self.midNm = midNm
    def get_sufNm(self): return self.sufNm
    def set_sufNm(self, sufNm): self.sufNm = sufNm
    def validate_Str25(self, value):
        # Validate type Str25, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 25:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on Str25' % {"value" : value.encode("utf-8")} )
    def validate_Str20(self, value):
        # Validate type Str20, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on Str20' % {"value" : value.encode("utf-8")} )
    def validate_Str5(self, value):
        # Validate type Str5, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 5:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on Str5' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OthrNmType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OthrNmType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OthrNmType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OthrNmType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OthrNmType'):
        if self.lastNm is not None and 'lastNm' not in already_processed:
            already_processed.add('lastNm')
            outfile.write(' lastNm=%s' % (quote_attrib(self.lastNm), ))
        if self.firstNm is not None and 'firstNm' not in already_processed:
            already_processed.add('firstNm')
            outfile.write(' firstNm=%s' % (quote_attrib(self.firstNm), ))
        if self.midNm is not None and 'midNm' not in already_processed:
            already_processed.add('midNm')
            outfile.write(' midNm=%s' % (quote_attrib(self.midNm), ))
        if self.sufNm is not None and 'sufNm' not in already_processed:
            already_processed.add('sufNm')
            outfile.write(' sufNm=%s' % (quote_attrib(self.sufNm), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OthrNmType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('lastNm', node)
        if value is not None and 'lastNm' not in already_processed:
            already_processed.add('lastNm')
            self.lastNm = value
            self.validate_Str25(self.lastNm)    # validate type Str25
        value = find_attr_value_('firstNm', node)
        if value is not None and 'firstNm' not in already_processed:
            already_processed.add('firstNm')
            self.firstNm = value
            self.validate_Str25(self.firstNm)    # validate type Str25
        value = find_attr_value_('midNm', node)
        if value is not None and 'midNm' not in already_processed:
            already_processed.add('midNm')
            self.midNm = value
            self.validate_Str20(self.midNm)    # validate type Str20
        value = find_attr_value_('sufNm', node)
        if value is not None and 'sufNm' not in already_processed:
            already_processed.add('sufNm')
            self.sufNm = value
            self.validate_Str5(self.sufNm)    # validate type Str5
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OthrNmType


class CrntEmpsType(GeneratedsSuper):
    """The Current Employment node contains collection of active employment
    details"""
    subclass = None
    superclass = None
    def __init__(self, CrntEmp=None):
        self.original_tagname_ = None
        if CrntEmp is None:
            self.CrntEmp = []
        else:
            self.CrntEmp = CrntEmp
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CrntEmpsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CrntEmpsType.subclass:
            return CrntEmpsType.subclass(*args_, **kwargs_)
        else:
            return CrntEmpsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CrntEmp(self): return self.CrntEmp
    def set_CrntEmp(self, CrntEmp): self.CrntEmp = CrntEmp
    def add_CrntEmp(self, value): self.CrntEmp.append(value)
    def insert_CrntEmp_at(self, index, value): self.CrntEmp.insert(index, value)
    def replace_CrntEmp_at(self, index, value): self.CrntEmp[index] = value
    def hasContent_(self):
        if (
            self.CrntEmp
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CrntEmpsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CrntEmpsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CrntEmpsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CrntEmpsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CrntEmpsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CrntEmpsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for CrntEmp_ in self.CrntEmp:
            CrntEmp_.export(outfile, level, namespace_, name_='CrntEmp', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CrntEmp':
            obj_ = CrntEmpType.factory()
            obj_.build(child_)
            self.CrntEmp.append(obj_)
            obj_.original_tagname_ = 'CrntEmp'
# end class CrntEmpsType


class CrntEmpType(GeneratedsSuper):
    """This node has the Firm's business name from the IARD composite
    record This node has the firm's CRD number. This node has the
    firm's address - street1. This node has the firm's address -
    street2 This node has the firm's address - City This node has
    the firm's address - State This node has the firm's address -
    Country This node has the firm's address - Postal Code"""
    subclass = None
    superclass = None
    def __init__(self, orgNm=None, orgPK=None, str1=None, str2=None, city=None, state=None, cntry=None, postlCd=None, CrntRgstns=None, BrnchOfLocs=None):
        self.original_tagname_ = None
        self.orgNm = _cast(None, orgNm)
        self.orgPK = _cast(None, orgPK)
        self.str1 = _cast(None, str1)
        self.str2 = _cast(None, str2)
        self.city = _cast(None, city)
        self.state = _cast(None, state)
        self.cntry = _cast(None, cntry)
        self.postlCd = _cast(None, postlCd)
        self.CrntRgstns = CrntRgstns
        self.BrnchOfLocs = BrnchOfLocs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CrntEmpType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CrntEmpType.subclass:
            return CrntEmpType.subclass(*args_, **kwargs_)
        else:
            return CrntEmpType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CrntRgstns(self): return self.CrntRgstns
    def set_CrntRgstns(self, CrntRgstns): self.CrntRgstns = CrntRgstns
    def get_BrnchOfLocs(self): return self.BrnchOfLocs
    def set_BrnchOfLocs(self, BrnchOfLocs): self.BrnchOfLocs = BrnchOfLocs
    def get_orgNm(self): return self.orgNm
    def set_orgNm(self, orgNm): self.orgNm = orgNm
    def get_orgPK(self): return self.orgPK
    def set_orgPK(self, orgPK): self.orgPK = orgPK
    def get_str1(self): return self.str1
    def set_str1(self, str1): self.str1 = str1
    def get_str2(self): return self.str2
    def set_str2(self, str2): self.str2 = str2
    def get_city(self): return self.city
    def set_city(self, city): self.city = city
    def get_state(self): return self.state
    def set_state(self, state): self.state = state
    def get_cntry(self): return self.cntry
    def set_cntry(self, cntry): self.cntry = cntry
    def get_postlCd(self): return self.postlCd
    def set_postlCd(self, postlCd): self.postlCd = postlCd
    def validate_Str64(self, value):
        # Validate type Str64, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 64:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on Str64' % {"value" : value.encode("utf-8")} )
    def validate_Int10(self, value):
        # Validate type Int10, a restriction on xsd:integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 10:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on Int10' % {"value" : value} )
    def validate_Str50(self, value):
        # Validate type Str50, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 50:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on Str50' % {"value" : value.encode("utf-8")} )
    def validate_StateCdType(self, value):
        # Validate type StateCdType, a restriction on xsd:NMTOKEN.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AK', 'AL', 'AR', 'AZ', 'CA', 'CO', 'CT', 'DC', 'DE', 'FL', 'GA', 'GU', 'HI', 'IA', 'ID', 'IL', 'IN', 'KS', 'KY', 'LA', 'MA', 'MD', 'ME', 'MI', 'MN', 'MO', 'MS', 'MT', 'NC', 'ND', 'NE', 'NH', 'NJ', 'NM', 'NV', 'NY', 'OH', 'OK', 'OR', 'PA', 'PR', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VA', 'VT', 'WA', 'WI', 'WV', 'WY', 'VI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on StateCdType' % {"value" : value.encode("utf-8")} )
            if len(str(value)) > 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on StateCdType' % {"value" : value} )
    def validate_Str11(self, value):
        # Validate type Str11, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 11:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on Str11' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.CrntRgstns is not None or
            self.BrnchOfLocs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CrntEmpType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CrntEmpType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CrntEmpType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CrntEmpType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CrntEmpType'):
        if self.orgNm is not None and 'orgNm' not in already_processed:
            already_processed.add('orgNm')
            outfile.write(' orgNm=%s' % (quote_attrib(self.orgNm), ))
        if self.orgPK is not None and 'orgPK' not in already_processed:
            already_processed.add('orgPK')
            outfile.write(' orgPK=%s' % (quote_attrib(self.orgPK), ))
        if self.str1 is not None and 'str1' not in already_processed:
            already_processed.add('str1')
            outfile.write(' str1=%s' % (quote_attrib(self.str1), ))
        if self.str2 is not None and 'str2' not in already_processed:
            already_processed.add('str2')
            outfile.write(' str2=%s' % (quote_attrib(self.str2), ))
        if self.city is not None and 'city' not in already_processed:
            already_processed.add('city')
            outfile.write(' city=%s' % (quote_attrib(self.city), ))
        if self.state is not None and 'state' not in already_processed:
            already_processed.add('state')
            outfile.write(' state=%s' % (quote_attrib(self.state), ))
        if self.cntry is not None and 'cntry' not in already_processed:
            already_processed.add('cntry')
            outfile.write(' cntry=%s' % (quote_attrib(self.cntry), ))
        if self.postlCd is not None and 'postlCd' not in already_processed:
            already_processed.add('postlCd')
            outfile.write(' postlCd=%s' % (quote_attrib(self.postlCd), ))
    def exportChildren(self, outfile, level, namespace_='', name_='CrntEmpType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CrntRgstns is not None:
            self.CrntRgstns.export(outfile, level, namespace_, name_='CrntRgstns', pretty_print=pretty_print)
        if self.BrnchOfLocs is not None:
            self.BrnchOfLocs.export(outfile, level, namespace_, name_='BrnchOfLocs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('orgNm', node)
        if value is not None and 'orgNm' not in already_processed:
            already_processed.add('orgNm')
            self.orgNm = value
            self.validate_Str64(self.orgNm)    # validate type Str64
        value = find_attr_value_('orgPK', node)
        if value is not None and 'orgPK' not in already_processed:
            already_processed.add('orgPK')
            try:
                self.orgPK = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_Int10(self.orgPK)    # validate type Int10
        value = find_attr_value_('str1', node)
        if value is not None and 'str1' not in already_processed:
            already_processed.add('str1')
            self.str1 = value
            self.validate_Str50(self.str1)    # validate type Str50
        value = find_attr_value_('str2', node)
        if value is not None and 'str2' not in already_processed:
            already_processed.add('str2')
            self.str2 = value
            self.validate_Str50(self.str2)    # validate type Str50
        value = find_attr_value_('city', node)
        if value is not None and 'city' not in already_processed:
            already_processed.add('city')
            self.city = value
            self.validate_Str50(self.city)    # validate type Str50
        value = find_attr_value_('state', node)
        if value is not None and 'state' not in already_processed:
            already_processed.add('state')
            self.state = value
            self.validate_StateCdType(self.state)    # validate type StateCdType
        value = find_attr_value_('cntry', node)
        if value is not None and 'cntry' not in already_processed:
            already_processed.add('cntry')
            self.cntry = value
            self.validate_Str50(self.cntry)    # validate type Str50
        value = find_attr_value_('postlCd', node)
        if value is not None and 'postlCd' not in already_processed:
            already_processed.add('postlCd')
            self.postlCd = value
            self.validate_Str11(self.postlCd)    # validate type Str11
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CrntRgstns':
            obj_ = CrntRgstnsType.factory()
            obj_.build(child_)
            self.CrntRgstns = obj_
            obj_.original_tagname_ = 'CrntRgstns'
        elif nodeName_ == 'BrnchOfLocs':
            obj_ = BrnchOfLocsType.factory()
            obj_.build(child_)
            self.BrnchOfLocs = obj_
            obj_.original_tagname_ = 'BrnchOfLocs'
# end class CrntEmpType


class CrntRgstnsType(GeneratedsSuper):
    """The CurrentRegistrations node contains a collection of registration
    details for the individual."""
    subclass = None
    superclass = None
    def __init__(self, CrntRgstn=None):
        self.original_tagname_ = None
        if CrntRgstn is None:
            self.CrntRgstn = []
        else:
            self.CrntRgstn = CrntRgstn
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CrntRgstnsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CrntRgstnsType.subclass:
            return CrntRgstnsType.subclass(*args_, **kwargs_)
        else:
            return CrntRgstnsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CrntRgstn(self): return self.CrntRgstn
    def set_CrntRgstn(self, CrntRgstn): self.CrntRgstn = CrntRgstn
    def add_CrntRgstn(self, value): self.CrntRgstn.append(value)
    def insert_CrntRgstn_at(self, index, value): self.CrntRgstn.insert(index, value)
    def replace_CrntRgstn_at(self, index, value): self.CrntRgstn[index] = value
    def hasContent_(self):
        if (
            self.CrntRgstn
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CrntRgstnsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CrntRgstnsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CrntRgstnsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CrntRgstnsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CrntRgstnsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CrntRgstnsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for CrntRgstn_ in self.CrntRgstn:
            CrntRgstn_.export(outfile, level, namespace_, name_='CrntRgstn', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CrntRgstn':
            obj_ = CrntRgstnType.factory()
            obj_.build(child_)
            self.CrntRgstn.append(obj_)
            obj_.original_tagname_ = 'CrntRgstn'
# end class CrntRgstnsType


class CrntRgstnType(GeneratedsSuper):
    """The CurrentRegistration node contains one of many registration
    details for the individual. The regulatory Authority. The
    Registration Category. The current registration status. The date
    a status change was posted to the system. (YYYY-MM-DD)"""
    subclass = None
    superclass = None
    def __init__(self, regAuth=None, regCat=None, st=None, stDt=None):
        self.original_tagname_ = None
        self.regAuth = _cast(None, regAuth)
        self.regCat = _cast(None, regCat)
        self.st = _cast(None, st)
        self.stDt = _cast(None, stDt)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CrntRgstnType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CrntRgstnType.subclass:
            return CrntRgstnType.subclass(*args_, **kwargs_)
        else:
            return CrntRgstnType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_regAuth(self): return self.regAuth
    def set_regAuth(self, regAuth): self.regAuth = regAuth
    def get_regCat(self): return self.regCat
    def set_regCat(self, regCat): self.regCat = regCat
    def get_st(self): return self.st
    def set_st(self, st): self.st = st
    def get_stDt(self): return self.stDt
    def set_stDt(self, stDt): self.stDt = stDt
    def validate_StateCdType(self, value):
        # Validate type StateCdType, a restriction on xsd:NMTOKEN.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AK', 'AL', 'AR', 'AZ', 'CA', 'CO', 'CT', 'DC', 'DE', 'FL', 'GA', 'GU', 'HI', 'IA', 'ID', 'IL', 'IN', 'KS', 'KY', 'LA', 'MA', 'MD', 'ME', 'MI', 'MN', 'MO', 'MS', 'MT', 'NC', 'ND', 'NE', 'NH', 'NJ', 'NM', 'NV', 'NY', 'OH', 'OK', 'OR', 'PA', 'PR', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VA', 'VT', 'WA', 'WI', 'WV', 'WY', 'VI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on StateCdType' % {"value" : value.encode("utf-8")} )
            if len(str(value)) > 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on StateCdType' % {"value" : value} )
    def validate_registrationCategoryType(self, value):
        # Validate type registrationCategoryType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['RA']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on registrationCategoryType' % {"value" : value.encode("utf-8")} )
            if len(value) > 16:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on registrationCategoryType' % {"value" : value.encode("utf-8")} )
    def validate_registrationStatusCode(self, value):
        # Validate type registrationStatusCode, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ADMTERM', 'APPRNT', 'APPROVED', 'APPROVED_RES', 'BAR', 'CE2_YEAR_TRMD', 'CE_INACTIVE', 'DEFICIENT', 'DENIED', 'FTR', 'INACTIVE_PRINTS', 'MASS_TRNSF', 'PENDING', 'PURGED', 'REJECTED', 'REQUAL', 'REQUEST_TERM', 'REVOKED', 'SUSPENSION', 'TEMPREG', 'TERMED', 'T_NOREG', 'T_NOREG_FTR', 'T_NOREG_MT', 'T_NOU5', 'ABANDONED', 'TEMP_WD', 'T_NOMT', 'T_NOMTNOREG', 'APRSLTS', 'TRANS_RQST', 'TRANS_TERM', 'TRANS_ERROR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on registrationStatusCode' % {"value" : value.encode("utf-8")} )
            if len(value) > 16:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on registrationStatusCode' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CrntRgstnType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CrntRgstnType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CrntRgstnType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CrntRgstnType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CrntRgstnType'):
        if self.regAuth is not None and 'regAuth' not in already_processed:
            already_processed.add('regAuth')
            outfile.write(' regAuth=%s' % (quote_attrib(self.regAuth), ))
        if self.regCat is not None and 'regCat' not in already_processed:
            already_processed.add('regCat')
            outfile.write(' regCat=%s' % (quote_attrib(self.regCat), ))
        if self.st is not None and 'st' not in already_processed:
            already_processed.add('st')
            outfile.write(' st=%s' % (quote_attrib(self.st), ))
        if self.stDt is not None and 'stDt' not in already_processed:
            already_processed.add('stDt')
            outfile.write(' stDt=%s' % (quote_attrib(self.stDt), ))
    def exportChildren(self, outfile, level, namespace_='', name_='CrntRgstnType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('regAuth', node)
        if value is not None and 'regAuth' not in already_processed:
            already_processed.add('regAuth')
            self.regAuth = value
            self.validate_StateCdType(self.regAuth)    # validate type StateCdType
        value = find_attr_value_('regCat', node)
        if value is not None and 'regCat' not in already_processed:
            already_processed.add('regCat')
            self.regCat = value
            self.validate_registrationCategoryType(self.regCat)    # validate type registrationCategoryType
        value = find_attr_value_('st', node)
        if value is not None and 'st' not in already_processed:
            already_processed.add('st')
            self.st = value
            self.validate_registrationStatusCode(self.st)    # validate type registrationStatusCode
        value = find_attr_value_('stDt', node)
        if value is not None and 'stDt' not in already_processed:
            already_processed.add('stDt')
            self.stDt = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CrntRgstnType


class BrnchOfLocsType(GeneratedsSuper):
    """The Employment Location node contains a collection of Employment
    Location details for the individual."""
    subclass = None
    superclass = None
    def __init__(self, BrnchOfLoc=None):
        self.original_tagname_ = None
        if BrnchOfLoc is None:
            self.BrnchOfLoc = []
        else:
            self.BrnchOfLoc = BrnchOfLoc
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BrnchOfLocsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BrnchOfLocsType.subclass:
            return BrnchOfLocsType.subclass(*args_, **kwargs_)
        else:
            return BrnchOfLocsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BrnchOfLoc(self): return self.BrnchOfLoc
    def set_BrnchOfLoc(self, BrnchOfLoc): self.BrnchOfLoc = BrnchOfLoc
    def add_BrnchOfLoc(self, value): self.BrnchOfLoc.append(value)
    def insert_BrnchOfLoc_at(self, index, value): self.BrnchOfLoc.insert(index, value)
    def replace_BrnchOfLoc_at(self, index, value): self.BrnchOfLoc[index] = value
    def hasContent_(self):
        if (
            self.BrnchOfLoc
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='BrnchOfLocsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BrnchOfLocsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BrnchOfLocsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='BrnchOfLocsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='BrnchOfLocsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='BrnchOfLocsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for BrnchOfLoc_ in self.BrnchOfLoc:
            BrnchOfLoc_.export(outfile, level, namespace_, name_='BrnchOfLoc', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BrnchOfLoc':
            obj_ = BrnchOfLocType.factory()
            obj_.build(child_)
            self.BrnchOfLoc.append(obj_)
            obj_.original_tagname_ = 'BrnchOfLoc'
# end class BrnchOfLocsType


class BrnchOfLocType(GeneratedsSuper):
    """This node has the firm's Branch Office address - street1. This node
    has the firm's Branch Office address - street2 This node has the
    firm's Branch Office address - City This node has the firm's
    Branch Office address - State This node has the firm's Branch
    Office address - Country This node has the firm's Branch Office
    address - Postal Code"""
    subclass = None
    superclass = None
    def __init__(self, str1=None, str2=None, city=None, state=None, cntry=None, postlCd=None):
        self.original_tagname_ = None
        self.str1 = _cast(None, str1)
        self.str2 = _cast(None, str2)
        self.city = _cast(None, city)
        self.state = _cast(None, state)
        self.cntry = _cast(None, cntry)
        self.postlCd = _cast(None, postlCd)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BrnchOfLocType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BrnchOfLocType.subclass:
            return BrnchOfLocType.subclass(*args_, **kwargs_)
        else:
            return BrnchOfLocType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_str1(self): return self.str1
    def set_str1(self, str1): self.str1 = str1
    def get_str2(self): return self.str2
    def set_str2(self, str2): self.str2 = str2
    def get_city(self): return self.city
    def set_city(self, city): self.city = city
    def get_state(self): return self.state
    def set_state(self, state): self.state = state
    def get_cntry(self): return self.cntry
    def set_cntry(self, cntry): self.cntry = cntry
    def get_postlCd(self): return self.postlCd
    def set_postlCd(self, postlCd): self.postlCd = postlCd
    def validate_Str50(self, value):
        # Validate type Str50, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 50:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on Str50' % {"value" : value.encode("utf-8")} )
    def validate_StateCdType(self, value):
        # Validate type StateCdType, a restriction on xsd:NMTOKEN.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AK', 'AL', 'AR', 'AZ', 'CA', 'CO', 'CT', 'DC', 'DE', 'FL', 'GA', 'GU', 'HI', 'IA', 'ID', 'IL', 'IN', 'KS', 'KY', 'LA', 'MA', 'MD', 'ME', 'MI', 'MN', 'MO', 'MS', 'MT', 'NC', 'ND', 'NE', 'NH', 'NJ', 'NM', 'NV', 'NY', 'OH', 'OK', 'OR', 'PA', 'PR', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VA', 'VT', 'WA', 'WI', 'WV', 'WY', 'VI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on StateCdType' % {"value" : value.encode("utf-8")} )
            if len(str(value)) > 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on StateCdType' % {"value" : value} )
    def validate_Str11(self, value):
        # Validate type Str11, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 11:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on Str11' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='BrnchOfLocType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BrnchOfLocType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BrnchOfLocType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='BrnchOfLocType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='BrnchOfLocType'):
        if self.str1 is not None and 'str1' not in already_processed:
            already_processed.add('str1')
            outfile.write(' str1=%s' % (quote_attrib(self.str1), ))
        if self.str2 is not None and 'str2' not in already_processed:
            already_processed.add('str2')
            outfile.write(' str2=%s' % (quote_attrib(self.str2), ))
        if self.city is not None and 'city' not in already_processed:
            already_processed.add('city')
            outfile.write(' city=%s' % (quote_attrib(self.city), ))
        if self.state is not None and 'state' not in already_processed:
            already_processed.add('state')
            outfile.write(' state=%s' % (quote_attrib(self.state), ))
        if self.cntry is not None and 'cntry' not in already_processed:
            already_processed.add('cntry')
            outfile.write(' cntry=%s' % (quote_attrib(self.cntry), ))
        if self.postlCd is not None and 'postlCd' not in already_processed:
            already_processed.add('postlCd')
            outfile.write(' postlCd=%s' % (quote_attrib(self.postlCd), ))
    def exportChildren(self, outfile, level, namespace_='', name_='BrnchOfLocType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('str1', node)
        if value is not None and 'str1' not in already_processed:
            already_processed.add('str1')
            self.str1 = value
            self.validate_Str50(self.str1)    # validate type Str50
        value = find_attr_value_('str2', node)
        if value is not None and 'str2' not in already_processed:
            already_processed.add('str2')
            self.str2 = value
            self.validate_Str50(self.str2)    # validate type Str50
        value = find_attr_value_('city', node)
        if value is not None and 'city' not in already_processed:
            already_processed.add('city')
            self.city = value
            self.validate_Str50(self.city)    # validate type Str50
        value = find_attr_value_('state', node)
        if value is not None and 'state' not in already_processed:
            already_processed.add('state')
            self.state = value
            self.validate_StateCdType(self.state)    # validate type StateCdType
        value = find_attr_value_('cntry', node)
        if value is not None and 'cntry' not in already_processed:
            already_processed.add('cntry')
            self.cntry = value
            self.validate_Str50(self.cntry)    # validate type Str50
        value = find_attr_value_('postlCd', node)
        if value is not None and 'postlCd' not in already_processed:
            already_processed.add('postlCd')
            self.postlCd = value
            self.validate_Str11(self.postlCd)    # validate type Str11
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class BrnchOfLocType


class ExmsType(GeneratedsSuper):
    """The Exams node contains a collection of exam nodes each describing
    details about an individual's Passed State Exams
    (S63,S64,S65,S66)."""
    subclass = None
    superclass = None
    def __init__(self, Exm=None):
        self.original_tagname_ = None
        if Exm is None:
            self.Exm = []
        else:
            self.Exm = Exm
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExmsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExmsType.subclass:
            return ExmsType.subclass(*args_, **kwargs_)
        else:
            return ExmsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Exm(self): return self.Exm
    def set_Exm(self, Exm): self.Exm = Exm
    def add_Exm(self, value): self.Exm.append(value)
    def insert_Exm_at(self, index, value): self.Exm.insert(index, value)
    def replace_Exm_at(self, index, value): self.Exm[index] = value
    def hasContent_(self):
        if (
            self.Exm
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ExmsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExmsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ExmsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ExmsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ExmsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ExmsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Exm_ in self.Exm:
            Exm_.export(outfile, level, namespace_, name_='Exm', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Exm':
            obj_ = ExmType.factory()
            obj_.build(child_)
            self.Exm.append(obj_)
            obj_.original_tagname_ = 'Exm'
# end class ExmsType


class ExmType(GeneratedsSuper):
    """The Exam node contains one of many state exam details for the
    individual. The Exam Code. The Exam Name. The date the exam was
    taken.(YYYY-MM-DD)"""
    subclass = None
    superclass = None
    def __init__(self, exmCd=None, exmNm=None, exmDt=None):
        self.original_tagname_ = None
        self.exmCd = _cast(None, exmCd)
        self.exmNm = _cast(None, exmNm)
        self.exmDt = _cast(None, exmDt)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExmType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExmType.subclass:
            return ExmType.subclass(*args_, **kwargs_)
        else:
            return ExmType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_exmCd(self): return self.exmCd
    def set_exmCd(self, exmCd): self.exmCd = exmCd
    def get_exmNm(self): return self.exmNm
    def set_exmNm(self, exmNm): self.exmNm = exmNm
    def get_exmDt(self): return self.exmDt
    def set_exmDt(self, exmDt): self.exmDt = exmDt
    def validate_examCodeType(self, value):
        # Validate type examCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['S63', 'S64', 'S65', 'S66']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on examCodeType' % {"value" : value.encode("utf-8")} )
            if len(value) > 16:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on examCodeType' % {"value" : value.encode("utf-8")} )
    def validate_Str128(self, value):
        # Validate type Str128, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 512:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on Str128' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ExmType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExmType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ExmType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ExmType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ExmType'):
        if self.exmCd is not None and 'exmCd' not in already_processed:
            already_processed.add('exmCd')
            outfile.write(' exmCd=%s' % (quote_attrib(self.exmCd), ))
        if self.exmNm is not None and 'exmNm' not in already_processed:
            already_processed.add('exmNm')
            outfile.write(' exmNm=%s' % (quote_attrib(self.exmNm), ))
        if self.exmDt is not None and 'exmDt' not in already_processed:
            already_processed.add('exmDt')
            outfile.write(' exmDt=%s' % (quote_attrib(self.exmDt), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ExmType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('exmCd', node)
        if value is not None and 'exmCd' not in already_processed:
            already_processed.add('exmCd')
            self.exmCd = value
            self.validate_examCodeType(self.exmCd)    # validate type examCodeType
        value = find_attr_value_('exmNm', node)
        if value is not None and 'exmNm' not in already_processed:
            already_processed.add('exmNm')
            self.exmNm = value
            self.validate_Str128(self.exmNm)    # validate type Str128
        value = find_attr_value_('exmDt', node)
        if value is not None and 'exmDt' not in already_processed:
            already_processed.add('exmDt')
            self.exmDt = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ExmType


class DsgntnsType(GeneratedsSuper):
    """This node describes a collection of professional designations
    information for the individual."""
    subclass = None
    superclass = None
    def __init__(self, Dsgntn=None):
        self.original_tagname_ = None
        if Dsgntn is None:
            self.Dsgntn = []
        else:
            self.Dsgntn = Dsgntn
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DsgntnsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DsgntnsType.subclass:
            return DsgntnsType.subclass(*args_, **kwargs_)
        else:
            return DsgntnsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Dsgntn(self): return self.Dsgntn
    def set_Dsgntn(self, Dsgntn): self.Dsgntn = Dsgntn
    def add_Dsgntn(self, value): self.Dsgntn.append(value)
    def insert_Dsgntn_at(self, index, value): self.Dsgntn.insert(index, value)
    def replace_Dsgntn_at(self, index, value): self.Dsgntn[index] = value
    def hasContent_(self):
        if (
            self.Dsgntn
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DsgntnsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DsgntnsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DsgntnsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DsgntnsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DsgntnsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DsgntnsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Dsgntn_ in self.Dsgntn:
            Dsgntn_.export(outfile, level, namespace_, name_='Dsgntn', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Dsgntn':
            obj_ = DsgntnType.factory()
            obj_.build(child_)
            self.Dsgntn.append(obj_)
            obj_.original_tagname_ = 'Dsgntn'
# end class DsgntnsType


class DsgntnType(GeneratedsSuper):
    """This node describes a one of many designations information for the
    individual. The designation code."""
    subclass = None
    superclass = None
    def __init__(self, dsgntnNm=None):
        self.original_tagname_ = None
        self.dsgntnNm = _cast(None, dsgntnNm)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DsgntnType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DsgntnType.subclass:
            return DsgntnType.subclass(*args_, **kwargs_)
        else:
            return DsgntnType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dsgntnNm(self): return self.dsgntnNm
    def set_dsgntnNm(self, dsgntnNm): self.dsgntnNm = dsgntnNm
    def validate_Str128(self, value):
        # Validate type Str128, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 512:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on Str128' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DsgntnType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DsgntnType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DsgntnType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DsgntnType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DsgntnType'):
        if self.dsgntnNm is not None and 'dsgntnNm' not in already_processed:
            already_processed.add('dsgntnNm')
            outfile.write(' dsgntnNm=%s' % (quote_attrib(self.dsgntnNm), ))
    def exportChildren(self, outfile, level, namespace_='', name_='DsgntnType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dsgntnNm', node)
        if value is not None and 'dsgntnNm' not in already_processed:
            already_processed.add('dsgntnNm')
            self.dsgntnNm = value
            self.validate_Str128(self.dsgntnNm)    # validate type Str128
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class DsgntnType


class PrevRgstnsType(GeneratedsSuper):
    """The PreviousRegistration node contains registrations previously held
    by the individual."""
    subclass = None
    superclass = None
    def __init__(self, PrevRgstn=None):
        self.original_tagname_ = None
        if PrevRgstn is None:
            self.PrevRgstn = []
        else:
            self.PrevRgstn = PrevRgstn
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PrevRgstnsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PrevRgstnsType.subclass:
            return PrevRgstnsType.subclass(*args_, **kwargs_)
        else:
            return PrevRgstnsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PrevRgstn(self): return self.PrevRgstn
    def set_PrevRgstn(self, PrevRgstn): self.PrevRgstn = PrevRgstn
    def add_PrevRgstn(self, value): self.PrevRgstn.append(value)
    def insert_PrevRgstn_at(self, index, value): self.PrevRgstn.insert(index, value)
    def replace_PrevRgstn_at(self, index, value): self.PrevRgstn[index] = value
    def hasContent_(self):
        if (
            self.PrevRgstn
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PrevRgstnsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PrevRgstnsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PrevRgstnsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PrevRgstnsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PrevRgstnsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PrevRgstnsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for PrevRgstn_ in self.PrevRgstn:
            PrevRgstn_.export(outfile, level, namespace_, name_='PrevRgstn', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PrevRgstn':
            obj_ = PrevRgstnType.factory()
            obj_.build(child_)
            self.PrevRgstn.append(obj_)
            obj_.original_tagname_ = 'PrevRgstn'
# end class PrevRgstnsType


class PrevRgstnType(GeneratedsSuper):
    """The PreviousRegistration node contains one of many registration for
    the individual previously held. This node has the Firm's
    business name from the IARD composite record This node has the
    firm's CRD number. The Registration Begin date. (YYYY-MM-DD) The
    Registration End date. (YYYY-MM-DD)"""
    subclass = None
    superclass = None
    def __init__(self, orgNm=None, orgPK=None, regBeginDt=None, regEndDt=None, BrnchOfLocs=None):
        self.original_tagname_ = None
        self.orgNm = _cast(None, orgNm)
        self.orgPK = _cast(None, orgPK)
        self.regBeginDt = _cast(None, regBeginDt)
        self.regEndDt = _cast(None, regEndDt)
        if BrnchOfLocs is None:
            self.BrnchOfLocs = []
        else:
            self.BrnchOfLocs = BrnchOfLocs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PrevRgstnType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PrevRgstnType.subclass:
            return PrevRgstnType.subclass(*args_, **kwargs_)
        else:
            return PrevRgstnType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BrnchOfLocs(self): return self.BrnchOfLocs
    def set_BrnchOfLocs(self, BrnchOfLocs): self.BrnchOfLocs = BrnchOfLocs
    def add_BrnchOfLocs(self, value): self.BrnchOfLocs.append(value)
    def insert_BrnchOfLocs_at(self, index, value): self.BrnchOfLocs.insert(index, value)
    def replace_BrnchOfLocs_at(self, index, value): self.BrnchOfLocs[index] = value
    def get_orgNm(self): return self.orgNm
    def set_orgNm(self, orgNm): self.orgNm = orgNm
    def get_orgPK(self): return self.orgPK
    def set_orgPK(self, orgPK): self.orgPK = orgPK
    def get_regBeginDt(self): return self.regBeginDt
    def set_regBeginDt(self, regBeginDt): self.regBeginDt = regBeginDt
    def get_regEndDt(self): return self.regEndDt
    def set_regEndDt(self, regEndDt): self.regEndDt = regEndDt
    def validate_Str64(self, value):
        # Validate type Str64, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 64:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on Str64' % {"value" : value.encode("utf-8")} )
    def validate_Int10(self, value):
        # Validate type Int10, a restriction on xsd:integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 10:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on Int10' % {"value" : value} )
    def hasContent_(self):
        if (
            self.BrnchOfLocs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PrevRgstnType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PrevRgstnType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PrevRgstnType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PrevRgstnType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PrevRgstnType'):
        if self.orgNm is not None and 'orgNm' not in already_processed:
            already_processed.add('orgNm')
            outfile.write(' orgNm=%s' % (quote_attrib(self.orgNm), ))
        if self.orgPK is not None and 'orgPK' not in already_processed:
            already_processed.add('orgPK')
            outfile.write(' orgPK=%s' % (quote_attrib(self.orgPK), ))
        if self.regBeginDt is not None and 'regBeginDt' not in already_processed:
            already_processed.add('regBeginDt')
            outfile.write(' regBeginDt=%s' % (quote_attrib(self.regBeginDt), ))
        if self.regEndDt is not None and 'regEndDt' not in already_processed:
            already_processed.add('regEndDt')
            outfile.write(' regEndDt=%s' % (quote_attrib(self.regEndDt), ))
    def exportChildren(self, outfile, level, namespace_='', name_='PrevRgstnType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for BrnchOfLocs_ in self.BrnchOfLocs:
            BrnchOfLocs_.export(outfile, level, namespace_, name_='BrnchOfLocs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('orgNm', node)
        if value is not None and 'orgNm' not in already_processed:
            already_processed.add('orgNm')
            self.orgNm = value
            self.validate_Str64(self.orgNm)    # validate type Str64
        value = find_attr_value_('orgPK', node)
        if value is not None and 'orgPK' not in already_processed:
            already_processed.add('orgPK')
            try:
                self.orgPK = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_Int10(self.orgPK)    # validate type Int10
        value = find_attr_value_('regBeginDt', node)
        if value is not None and 'regBeginDt' not in already_processed:
            already_processed.add('regBeginDt')
            self.regBeginDt = value
        value = find_attr_value_('regEndDt', node)
        if value is not None and 'regEndDt' not in already_processed:
            already_processed.add('regEndDt')
            self.regEndDt = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BrnchOfLocs':
            obj_ = PrevBrnchOfLocsType.factory()
            obj_.build(child_)
            self.BrnchOfLocs.append(obj_)
            obj_.original_tagname_ = 'BrnchOfLocs'
# end class PrevRgstnType


class PrevBrnchOfLocsType(GeneratedsSuper):
    """The Employment Location node contains a collection of Employment
    Location details for the individual."""
    subclass = None
    superclass = None
    def __init__(self, BrnchOfLoc=None):
        self.original_tagname_ = None
        if BrnchOfLoc is None:
            self.BrnchOfLoc = []
        else:
            self.BrnchOfLoc = BrnchOfLoc
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PrevBrnchOfLocsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PrevBrnchOfLocsType.subclass:
            return PrevBrnchOfLocsType.subclass(*args_, **kwargs_)
        else:
            return PrevBrnchOfLocsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BrnchOfLoc(self): return self.BrnchOfLoc
    def set_BrnchOfLoc(self, BrnchOfLoc): self.BrnchOfLoc = BrnchOfLoc
    def add_BrnchOfLoc(self, value): self.BrnchOfLoc.append(value)
    def insert_BrnchOfLoc_at(self, index, value): self.BrnchOfLoc.insert(index, value)
    def replace_BrnchOfLoc_at(self, index, value): self.BrnchOfLoc[index] = value
    def hasContent_(self):
        if (
            self.BrnchOfLoc
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PrevBrnchOfLocsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PrevBrnchOfLocsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PrevBrnchOfLocsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PrevBrnchOfLocsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PrevBrnchOfLocsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PrevBrnchOfLocsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for BrnchOfLoc_ in self.BrnchOfLoc:
            BrnchOfLoc_.export(outfile, level, namespace_, name_='BrnchOfLoc', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BrnchOfLoc':
            obj_ = PrevBrnchOfLocType.factory()
            obj_.build(child_)
            self.BrnchOfLoc.append(obj_)
            obj_.original_tagname_ = 'BrnchOfLoc'
# end class PrevBrnchOfLocsType


class PrevBrnchOfLocType(GeneratedsSuper):
    """This node has the firm's Branch Office address - City This node has
    the firm's Branch Office address - State"""
    subclass = None
    superclass = None
    def __init__(self, city=None, state=None):
        self.original_tagname_ = None
        self.city = _cast(None, city)
        self.state = _cast(None, state)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PrevBrnchOfLocType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PrevBrnchOfLocType.subclass:
            return PrevBrnchOfLocType.subclass(*args_, **kwargs_)
        else:
            return PrevBrnchOfLocType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_city(self): return self.city
    def set_city(self, city): self.city = city
    def get_state(self): return self.state
    def set_state(self, state): self.state = state
    def validate_Str50(self, value):
        # Validate type Str50, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 50:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on Str50' % {"value" : value.encode("utf-8")} )
    def validate_StateCdType(self, value):
        # Validate type StateCdType, a restriction on xsd:NMTOKEN.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AK', 'AL', 'AR', 'AZ', 'CA', 'CO', 'CT', 'DC', 'DE', 'FL', 'GA', 'GU', 'HI', 'IA', 'ID', 'IL', 'IN', 'KS', 'KY', 'LA', 'MA', 'MD', 'ME', 'MI', 'MN', 'MO', 'MS', 'MT', 'NC', 'ND', 'NE', 'NH', 'NJ', 'NM', 'NV', 'NY', 'OH', 'OK', 'OR', 'PA', 'PR', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VA', 'VT', 'WA', 'WI', 'WV', 'WY', 'VI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on StateCdType' % {"value" : value.encode("utf-8")} )
            if len(str(value)) > 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on StateCdType' % {"value" : value} )
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PrevBrnchOfLocType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PrevBrnchOfLocType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PrevBrnchOfLocType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PrevBrnchOfLocType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PrevBrnchOfLocType'):
        if self.city is not None and 'city' not in already_processed:
            already_processed.add('city')
            outfile.write(' city=%s' % (quote_attrib(self.city), ))
        if self.state is not None and 'state' not in already_processed:
            already_processed.add('state')
            outfile.write(' state=%s' % (quote_attrib(self.state), ))
    def exportChildren(self, outfile, level, namespace_='', name_='PrevBrnchOfLocType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('city', node)
        if value is not None and 'city' not in already_processed:
            already_processed.add('city')
            self.city = value
            self.validate_Str50(self.city)    # validate type Str50
        value = find_attr_value_('state', node)
        if value is not None and 'state' not in already_processed:
            already_processed.add('state')
            self.state = value
            self.validate_StateCdType(self.state)    # validate type StateCdType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PrevBrnchOfLocType


class EmpHistsType(GeneratedsSuper):
    """The EmploymentHistories node contains a collection of employment
    history details for the individual."""
    subclass = None
    superclass = None
    def __init__(self, EmpHs=None):
        self.original_tagname_ = None
        if EmpHs is None:
            self.EmpHs = []
        else:
            self.EmpHs = EmpHs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EmpHistsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EmpHistsType.subclass:
            return EmpHistsType.subclass(*args_, **kwargs_)
        else:
            return EmpHistsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EmpHs(self): return self.EmpHs
    def set_EmpHs(self, EmpHs): self.EmpHs = EmpHs
    def add_EmpHs(self, value): self.EmpHs.append(value)
    def insert_EmpHs_at(self, index, value): self.EmpHs.insert(index, value)
    def replace_EmpHs_at(self, index, value): self.EmpHs[index] = value
    def hasContent_(self):
        if (
            self.EmpHs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='EmpHistsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EmpHistsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EmpHistsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='EmpHistsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='EmpHistsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='EmpHistsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for EmpHs_ in self.EmpHs:
            EmpHs_.export(outfile, level, namespace_, name_='EmpHs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EmpHs':
            obj_ = EmpHistType.factory()
            obj_.build(child_)
            self.EmpHs.append(obj_)
            obj_.original_tagname_ = 'EmpHs'
# end class EmpHistsType


class EmpHistType(GeneratedsSuper):
    """The EmploymentHistory node contains one of many employment history
    details for the individual. The Employment Begin date. (MM/YYYY)
    The Employment End date. (MM/YYYY) The organization name City of
    Employment. State of Employment."""
    subclass = None
    superclass = None
    def __init__(self, fromDt=None, toDt=None, orgNm=None, city=None, state=None):
        self.original_tagname_ = None
        self.fromDt = _cast(None, fromDt)
        self.toDt = _cast(None, toDt)
        self.orgNm = _cast(None, orgNm)
        self.city = _cast(None, city)
        self.state = _cast(None, state)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EmpHistType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EmpHistType.subclass:
            return EmpHistType.subclass(*args_, **kwargs_)
        else:
            return EmpHistType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_fromDt(self): return self.fromDt
    def set_fromDt(self, fromDt): self.fromDt = fromDt
    def get_toDt(self): return self.toDt
    def set_toDt(self, toDt): self.toDt = toDt
    def get_orgNm(self): return self.orgNm
    def set_orgNm(self, orgNm): self.orgNm = orgNm
    def get_city(self): return self.city
    def set_city(self, city): self.city = city
    def get_state(self): return self.state
    def set_state(self, state): self.state = state
    def validate_Str7(self, value):
        # Validate type Str7, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 7:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on Str7' % {"value" : value.encode("utf-8")} )
    def validate_Str64(self, value):
        # Validate type Str64, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 64:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on Str64' % {"value" : value.encode("utf-8")} )
    def validate_Str50(self, value):
        # Validate type Str50, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 50:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on Str50' % {"value" : value.encode("utf-8")} )
    def validate_StateCdType(self, value):
        # Validate type StateCdType, a restriction on xsd:NMTOKEN.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AK', 'AL', 'AR', 'AZ', 'CA', 'CO', 'CT', 'DC', 'DE', 'FL', 'GA', 'GU', 'HI', 'IA', 'ID', 'IL', 'IN', 'KS', 'KY', 'LA', 'MA', 'MD', 'ME', 'MI', 'MN', 'MO', 'MS', 'MT', 'NC', 'ND', 'NE', 'NH', 'NJ', 'NM', 'NV', 'NY', 'OH', 'OK', 'OR', 'PA', 'PR', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VA', 'VT', 'WA', 'WI', 'WV', 'WY', 'VI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on StateCdType' % {"value" : value.encode("utf-8")} )
            if len(str(value)) > 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on StateCdType' % {"value" : value} )
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='EmpHistType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EmpHistType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EmpHistType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='EmpHistType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='EmpHistType'):
        if self.fromDt is not None and 'fromDt' not in already_processed:
            already_processed.add('fromDt')
            outfile.write(' fromDt=%s' % (quote_attrib(self.fromDt), ))
        if self.toDt is not None and 'toDt' not in already_processed:
            already_processed.add('toDt')
            outfile.write(' toDt=%s' % (quote_attrib(self.toDt), ))
        if self.orgNm is not None and 'orgNm' not in already_processed:
            already_processed.add('orgNm')
            outfile.write(' orgNm=%s' % (quote_attrib(self.orgNm), ))
        if self.city is not None and 'city' not in already_processed:
            already_processed.add('city')
            outfile.write(' city=%s' % (quote_attrib(self.city), ))
        if self.state is not None and 'state' not in already_processed:
            already_processed.add('state')
            outfile.write(' state=%s' % (quote_attrib(self.state), ))
    def exportChildren(self, outfile, level, namespace_='', name_='EmpHistType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('fromDt', node)
        if value is not None and 'fromDt' not in already_processed:
            already_processed.add('fromDt')
            self.fromDt = value
            self.validate_Str7(self.fromDt)    # validate type Str7
        value = find_attr_value_('toDt', node)
        if value is not None and 'toDt' not in already_processed:
            already_processed.add('toDt')
            self.toDt = value
            self.validate_Str7(self.toDt)    # validate type Str7
        value = find_attr_value_('orgNm', node)
        if value is not None and 'orgNm' not in already_processed:
            already_processed.add('orgNm')
            self.orgNm = value
            self.validate_Str64(self.orgNm)    # validate type Str64
        value = find_attr_value_('city', node)
        if value is not None and 'city' not in already_processed:
            already_processed.add('city')
            self.city = value
            self.validate_Str50(self.city)    # validate type Str50
        value = find_attr_value_('state', node)
        if value is not None and 'state' not in already_processed:
            already_processed.add('state')
            self.state = value
            self.validate_StateCdType(self.state)    # validate type StateCdType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class EmpHistType


class OthrBussType(GeneratedsSuper):
    """This node describes a collection of other businesses for the
    individual."""
    subclass = None
    superclass = None
    def __init__(self, OthrBus=None):
        self.original_tagname_ = None
        self.OthrBus = OthrBus
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OthrBussType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OthrBussType.subclass:
            return OthrBussType.subclass(*args_, **kwargs_)
        else:
            return OthrBussType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OthrBus(self): return self.OthrBus
    def set_OthrBus(self, OthrBus): self.OthrBus = OthrBus
    def hasContent_(self):
        if (
            self.OthrBus is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OthrBussType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OthrBussType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OthrBussType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OthrBussType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OthrBussType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='OthrBussType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OthrBus is not None:
            self.OthrBus.export(outfile, level, namespace_, name_='OthrBus', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OthrBus':
            obj_ = OthrBusType.factory()
            obj_.build(child_)
            self.OthrBus = obj_
            obj_.original_tagname_ = 'OthrBus'
# end class OthrBussType


class OthrBusType(GeneratedsSuper):
    """Description for other business."""
    subclass = None
    superclass = None
    def __init__(self, desc=None):
        self.original_tagname_ = None
        self.desc = _cast(None, desc)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OthrBusType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OthrBusType.subclass:
            return OthrBusType.subclass(*args_, **kwargs_)
        else:
            return OthrBusType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_desc(self): return self.desc
    def set_desc(self, desc): self.desc = desc
    def validate_Str4000(self, value):
        # Validate type Str4000, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 4000:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on Str4000' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OthrBusType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OthrBusType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OthrBusType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OthrBusType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OthrBusType'):
        if self.desc is not None and 'desc' not in already_processed:
            already_processed.add('desc')
            outfile.write(' desc=%s' % (quote_attrib(self.desc), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OthrBusType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('desc', node)
        if value is not None and 'desc' not in already_processed:
            already_processed.add('desc')
            self.desc = value
            self.validate_Str4000(self.desc)    # validate type Str4000
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OthrBusType


class DRPsType(GeneratedsSuper):
    """The DRPs node contains a collection of reportable and disclosable
    DRPs for the individual."""
    subclass = None
    superclass = None
    def __init__(self, DRP=None):
        self.original_tagname_ = None
        if DRP is None:
            self.DRP = []
        else:
            self.DRP = DRP
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DRPsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DRPsType.subclass:
            return DRPsType.subclass(*args_, **kwargs_)
        else:
            return DRPsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DRP(self): return self.DRP
    def set_DRP(self, DRP): self.DRP = DRP
    def add_DRP(self, value): self.DRP.append(value)
    def insert_DRP_at(self, index, value): self.DRP.insert(index, value)
    def replace_DRP_at(self, index, value): self.DRP[index] = value
    def hasContent_(self):
        if (
            self.DRP
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DRPsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DRPsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DRPsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DRPsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DRPsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DRPsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DRP_ in self.DRP:
            DRP_.export(outfile, level, namespace_, name_='DRP', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DRP':
            obj_ = DRPType.factory()
            obj_.build(child_)
            self.DRP.append(obj_)
            obj_.original_tagname_ = 'DRP'
# end class DRPsType


class DRPType(GeneratedsSuper):
    """The DRPs node contains one of many reportable and disclosable DRPs
    for the individual. Flag to indicate the indvl has RegAction
    DRP. Flag to indicate the indvl has Criminal DRP. Flag to
    indicate the indvl has Bankrupt DRP. Flag to indicate the indvl
    has CivilJudc DRP. Flag to indicate the indvl has Bond DRP. Flag
    to indicate the indvl has Judgment DRP. Flag to indicate the
    indvl has Invstgn DRP. Flag to indicate the indvl has CustComp
    DRP. Flag to indicate the indvl has Termination DRP."""
    subclass = None
    superclass = None
    def __init__(self, hasRegAction=None, hasCriminal=None, hasBankrupt=None, hasCivilJudc=None, hasBond=None, hasJudgment=None, hasInvstgn=None, hasCustComp=None, hasTermination=None):
        self.original_tagname_ = None
        self.hasRegAction = _cast(None, hasRegAction)
        self.hasCriminal = _cast(None, hasCriminal)
        self.hasBankrupt = _cast(None, hasBankrupt)
        self.hasCivilJudc = _cast(None, hasCivilJudc)
        self.hasBond = _cast(None, hasBond)
        self.hasJudgment = _cast(None, hasJudgment)
        self.hasInvstgn = _cast(None, hasInvstgn)
        self.hasCustComp = _cast(None, hasCustComp)
        self.hasTermination = _cast(None, hasTermination)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DRPType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DRPType.subclass:
            return DRPType.subclass(*args_, **kwargs_)
        else:
            return DRPType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_hasRegAction(self): return self.hasRegAction
    def set_hasRegAction(self, hasRegAction): self.hasRegAction = hasRegAction
    def get_hasCriminal(self): return self.hasCriminal
    def set_hasCriminal(self, hasCriminal): self.hasCriminal = hasCriminal
    def get_hasBankrupt(self): return self.hasBankrupt
    def set_hasBankrupt(self, hasBankrupt): self.hasBankrupt = hasBankrupt
    def get_hasCivilJudc(self): return self.hasCivilJudc
    def set_hasCivilJudc(self, hasCivilJudc): self.hasCivilJudc = hasCivilJudc
    def get_hasBond(self): return self.hasBond
    def set_hasBond(self, hasBond): self.hasBond = hasBond
    def get_hasJudgment(self): return self.hasJudgment
    def set_hasJudgment(self, hasJudgment): self.hasJudgment = hasJudgment
    def get_hasInvstgn(self): return self.hasInvstgn
    def set_hasInvstgn(self, hasInvstgn): self.hasInvstgn = hasInvstgn
    def get_hasCustComp(self): return self.hasCustComp
    def set_hasCustComp(self, hasCustComp): self.hasCustComp = hasCustComp
    def get_hasTermination(self): return self.hasTermination
    def set_hasTermination(self, hasTermination): self.hasTermination = hasTermination
    def validate_answerYNType(self, value):
        # Validate type answerYNType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['Y', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on answerYNType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DRPType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DRPType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DRPType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DRPType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DRPType'):
        if self.hasRegAction is not None and 'hasRegAction' not in already_processed:
            already_processed.add('hasRegAction')
            outfile.write(' hasRegAction=%s' % (quote_attrib(self.hasRegAction), ))
        if self.hasCriminal is not None and 'hasCriminal' not in already_processed:
            already_processed.add('hasCriminal')
            outfile.write(' hasCriminal=%s' % (quote_attrib(self.hasCriminal), ))
        if self.hasBankrupt is not None and 'hasBankrupt' not in already_processed:
            already_processed.add('hasBankrupt')
            outfile.write(' hasBankrupt=%s' % (quote_attrib(self.hasBankrupt), ))
        if self.hasCivilJudc is not None and 'hasCivilJudc' not in already_processed:
            already_processed.add('hasCivilJudc')
            outfile.write(' hasCivilJudc=%s' % (quote_attrib(self.hasCivilJudc), ))
        if self.hasBond is not None and 'hasBond' not in already_processed:
            already_processed.add('hasBond')
            outfile.write(' hasBond=%s' % (quote_attrib(self.hasBond), ))
        if self.hasJudgment is not None and 'hasJudgment' not in already_processed:
            already_processed.add('hasJudgment')
            outfile.write(' hasJudgment=%s' % (quote_attrib(self.hasJudgment), ))
        if self.hasInvstgn is not None and 'hasInvstgn' not in already_processed:
            already_processed.add('hasInvstgn')
            outfile.write(' hasInvstgn=%s' % (quote_attrib(self.hasInvstgn), ))
        if self.hasCustComp is not None and 'hasCustComp' not in already_processed:
            already_processed.add('hasCustComp')
            outfile.write(' hasCustComp=%s' % (quote_attrib(self.hasCustComp), ))
        if self.hasTermination is not None and 'hasTermination' not in already_processed:
            already_processed.add('hasTermination')
            outfile.write(' hasTermination=%s' % (quote_attrib(self.hasTermination), ))
    def exportChildren(self, outfile, level, namespace_='', name_='DRPType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('hasRegAction', node)
        if value is not None and 'hasRegAction' not in already_processed:
            already_processed.add('hasRegAction')
            self.hasRegAction = value
            self.validate_answerYNType(self.hasRegAction)    # validate type answerYNType
        value = find_attr_value_('hasCriminal', node)
        if value is not None and 'hasCriminal' not in already_processed:
            already_processed.add('hasCriminal')
            self.hasCriminal = value
            self.validate_answerYNType(self.hasCriminal)    # validate type answerYNType
        value = find_attr_value_('hasBankrupt', node)
        if value is not None and 'hasBankrupt' not in already_processed:
            already_processed.add('hasBankrupt')
            self.hasBankrupt = value
            self.validate_answerYNType(self.hasBankrupt)    # validate type answerYNType
        value = find_attr_value_('hasCivilJudc', node)
        if value is not None and 'hasCivilJudc' not in already_processed:
            already_processed.add('hasCivilJudc')
            self.hasCivilJudc = value
            self.validate_answerYNType(self.hasCivilJudc)    # validate type answerYNType
        value = find_attr_value_('hasBond', node)
        if value is not None and 'hasBond' not in already_processed:
            already_processed.add('hasBond')
            self.hasBond = value
            self.validate_answerYNType(self.hasBond)    # validate type answerYNType
        value = find_attr_value_('hasJudgment', node)
        if value is not None and 'hasJudgment' not in already_processed:
            already_processed.add('hasJudgment')
            self.hasJudgment = value
            self.validate_answerYNType(self.hasJudgment)    # validate type answerYNType
        value = find_attr_value_('hasInvstgn', node)
        if value is not None and 'hasInvstgn' not in already_processed:
            already_processed.add('hasInvstgn')
            self.hasInvstgn = value
            self.validate_answerYNType(self.hasInvstgn)    # validate type answerYNType
        value = find_attr_value_('hasCustComp', node)
        if value is not None and 'hasCustComp' not in already_processed:
            already_processed.add('hasCustComp')
            self.hasCustComp = value
            self.validate_answerYNType(self.hasCustComp)    # validate type answerYNType
        value = find_attr_value_('hasTermination', node)
        if value is not None and 'hasTermination' not in already_processed:
            already_processed.add('hasTermination')
            self.hasTermination = value
            self.validate_answerYNType(self.hasTermination)    # validate type answerYNType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class DRPType


GDSClassesMapping = {
    'IAPDIndividualReport': IAPDIndividualReportType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'IAPDIndividualReportType'
        rootClass = IAPDIndividualReportType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'IAPDIndividualReportType'
        rootClass = IAPDIndividualReportType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    if sys.version_info.major == 2:
        from StringIO import StringIO as IOBuffer
    else:
        from io import BytesIO as IOBuffer
    parser = None
    doc = parsexml_(IOBuffer(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'IAPDIndividualReportType'
        rootClass = IAPDIndividualReportType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'IAPDIndividualReportType'
        rootClass = IAPDIndividualReportType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from IAPDclasses import *\n\n')
        sys.stdout.write('import IAPDclasses as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "BrnchOfLocType",
    "BrnchOfLocsType",
    "CrntEmpType",
    "CrntEmpsType",
    "CrntRgstnType",
    "CrntRgstnsType",
    "DRPType",
    "DRPsType",
    "DsgntnType",
    "DsgntnsType",
    "EmpHistType",
    "EmpHistsType",
    "ExmType",
    "ExmsType",
    "IAPDIndividualReportType",
    "IndvlType",
    "IndvlsType",
    "InfoType",
    "OthrBusType",
    "OthrBussType",
    "OthrNmType",
    "OthrNmsType",
    "PrevBrnchOfLocType",
    "PrevBrnchOfLocsType",
    "PrevRgstnType",
    "PrevRgstnsType"
]
